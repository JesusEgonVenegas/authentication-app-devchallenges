import axios from "axios";
import styles from "../styles/Edit.module.css"
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { useCallback, useEffect, useMemo, useState } from "react";
import { api } from "~/utils/api";

export default function Edit() {
 
  return (
    <>
      <Head>
        <title>Authentication App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.container}>
            <AuthShowcase  />
        </div>
      </main>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const [name, setName] = useState('')
  const [email, setEmail] = useState('')
  const [bio, setBio] = useState('')
  const [phone, setPhone] = useState('')
  const [password, setPassword] = useState('')
  const [image, setImage] = useState<File | undefined | null>(undefined)

  const [presignedUrl, setPresignedUrl] = useState<string | null>(null);
  const { mutateAsync: fetchPresignedUrls } = api.s3.getStandardUploadPresignedUrl.useMutation();
  const [submitDisabled, setSubmitDisabled] = useState(false)
  const apiUtils = api.useContext()


  useEffect(() => {
  if (sessionData?.user) {
    setName(sessionData.user.name || '');
    setEmail(sessionData.user.email || '');
    setBio(sessionData.user.bio || '');
    setPhone(sessionData.user.phone || '');
    setPassword(sessionData.user.password || '');
  }
}, [sessionData]);

  const editUser = api.updateUser.updateUser.useMutation();

  const handleSubmit = useCallback(async (e: any) => {
    if (!sessionData?.user.userId || !sessionData) return;
    e.preventDefault();

    try {
      if (presignedUrl && image) {
        await axios.put(presignedUrl, image.slice(), {
          headers: { "Content-Type": image.type },
        });
        console.log("Successfully uploaded ", image.name);

        const imageUrl = `https://auth-app-profile-pics.s3.us-west-1.amazonaws.com/${image.name}`;
        console.log(imageUrl)

        // Update user data after the image is uploaded
        try {
          await editUser.mutate({
            id: sessionData.user.userId,
            name: name,
            email: email,
            bio: bio,
            phone: phone,
            password: password,
            image: imageUrl,
          });

          // Update sessionData after the user data is edited
          sessionData.user.name = name;
          sessionData.user.email = email;
          sessionData.user.bio = bio;
          sessionData.user.phone = phone;
          sessionData.user.password = password;
          sessionData.user.image = imageUrl,

          console.log("User data updated");
        } catch (error) {
          console.log("Error editing user data:", error);
        }
      }
    } catch (error) {
      console.log("Error uploading image:", error);
    }
  }, [presignedUrl, image, name, email, bio, phone, password, sessionData]);

  // Fetch presigned URL when the image changes
  useEffect(() => {
    if (image) {
      fetchPresignedUrls({ key: image.name })
        .then((url) => {
          setPresignedUrl(url);
        })
        .catch((err) => console.error(err));
    }
  }, [image]);

  return (
    <>
      <button
        className={styles.loginButton}
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>

      <div className={styles.profileContainer}>
        <form onSubmit={handleSubmit}>
        <div className={styles.top}>
          <div>
            <p>Profile</p>
            <p>Some info may be visible to other people</p>
          </div>
        </div>
        <div>
          <p>Photo</p>
          <img src={sessionData?.user.image} alt="" />
          <input type="file" src="" alt="" onChange={(e) => e.target.files ? setImage(e.target.files[0]) : null} />
        </div>
        <div>
          <p>Name</p>
          <p>{sessionData?.user.name}</p>
          <input type="text"  onChange={(e) => setName(e.target.value)}/>
        </div>
        <div>
          <p>Bio</p>
          <p>{sessionData?.user.bio}</p>
          <input type="text" onChange={(e) => setBio(e.target.value)}/>
        </div>
        <div>
          <p>Phone</p>
          <p>{sessionData?.user.phone}</p>
          <input type="text" onChange={(e) => setPhone(e.target.value)}/>
        </div>
        <div>
          <p>Email</p>
          <p>{sessionData?.user.email}</p>
          <input type="email" onChange={(e) => setEmail(e.target.value)}/>
        </div>
        <div>
          <p>Password</p>
          <p>{sessionData?.user.password}</p>
          <input type="text" onChange={(e) => setPassword(e.target.value)}/>
        </div>
        <div>
            <button>Save</button>
        </div>
        </form>
      </div>
  </>
  );
}
